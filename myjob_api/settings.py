"""
Django settings for myjob_api project.

Generated by 'django-admin startproject' using Django 4.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from datetime import datetime
from decouple import config
from pathlib import Path
from datetime import timedelta
from celery.schedules import crontab
from django.utils import timezone
import cloudinary
import firebase_admin
from firebase_admin import credentials

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-m)n0iq(0d55p5$xc7t)wmn5$9-dv8zw1a3k9nwnf#v86&mu=gt'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)
APPEND_SLASH = config('APPEND_SLASH', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=lambda v: [s.strip() for s in v.split(',')])

CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', cast=lambda v: [s.strip() for s in v.split(',')])

# Application definition
INSTALLED_APPS = [
    'admin_volt.apps.AdminVoltConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cloudinary',
    'django_admin_listfilter_dropdown',
    'ckeditor',
    'django_otp',
    'rest_framework',
    'django_filters',
    'django_extensions',
    'drf_yasg',
    'oauth2_provider',
    'social_django',
    'drf_social_oauth2',
    'celery',
    'django_celery_beat',
    # internal apps
    'common',
    'authentication',
    'info',
    'job',
    'myjob',
    'corsheaders'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'myjob_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'myjob_api/templates/emails/',
                 BASE_DIR / 'myjob/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
                'myjob.context_processors.get_current_user'
            ],
        },
    },
]

WSGI_APPLICATION = 'myjob_api.wsgi.application'

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar_Basic': [
            ['Source', '-', 'Bold', 'Italic']
        ],
        'toolbar_YourCustomToolbarConfig': [
            {'name': 'basicstyles',
             'items': ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript']},
            {'name': 'paragraph',
             'items': ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-',
                       'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock']},
            {'name': 'insert',
             'items': ['Table', 'HorizontalRule']},
            '/',  # put this to force next toolbar on new line
        ],
        'toolbar': 'YourCustomToolbarConfig',  # put selected toolbar config here
        'height': 280,
        'width': '100%',
        'tabSpaces': 4,
    }
}

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
# Bo khi su dung sqlclient: mysqlclient==2.1.1
import pymysql

pymysql.install_as_MySQLdb()

DATABASES = {
    'default': {
        'ENGINE': config('DB_ENGINE'),
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT')
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'authentication.User'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'configs.paginations.CustomPagination',
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        'drf_social_oauth2.authentication.SocialAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
}

OAUTH2_PROVIDER = {
    'SCOPES': {
        'read': 'Read scope',
        'write': 'Write scope',
    },
    'CLIENT_ID_GENERATOR_CLASS': 'oauth2_provider.generators.ClientIdGenerator',
    'ACCESS_TOKEN_EXPIRE_SECONDS': 100000
}

AUTHENTICATION_BACKENDS = (
    # Facebook OAuth2
    'social_core.backends.facebook.FacebookAppOAuth2',
    'social_core.backends.facebook.FacebookOAuth2',

    # Google OAuth2
    'social_core.backends.google.GoogleOAuth2',

    # drf_social_oauth2
    'drf_social_oauth2.backends.DjangoOAuth2',
    # Django
    'django.contrib.auth.backends.ModelBackend',
)

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Ho_Chi_Minh'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, "myjob", "static")]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
CKEDITOR_UPLOAD_PATH = "uploads/"
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_ALL_ORIGINS = True
INTERNAL_IPS = ('127.0.0.1', '192.168.1.5')

LOGIN_REDIRECT_URL = '/'

SERVICE_REDIS_HOST = config('SERVICE_REDIS_HOST')
SERVICE_REDIS_PORT = config('SERVICE_REDIS_PORT', cast=int)
SERVICE_REDIS_USERNAME = config('SERVICE_REDIS_USERNAME')
SERVICE_REDIS_PASSWORD = config('SERVICE_REDIS_PASSWORD')
SERVICE_REDIS_DB = config('SERVICE_REDIS_DB', cast=int)

# FACEBOOK
# Facebook configuration
SOCIAL_AUTH_FACEBOOK_DIALOG_URL = 'https://www.facebook.com/v15.0/dialog/oauth/'
SOCIAL_AUTH_FACEBOOK_KEY = config('SOCIAL_AUTH_FACEBOOK_KEY')
SOCIAL_AUTH_FACEBOOK_SECRET = config('SOCIAL_AUTH_FACEBOOK_SECRET')
# Define SOCIAL_AUTH_FACEBOOK_SCOPE to get extra permissions from Facebook.
# Email is not sent by default, to get it, you must request the email permission.
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
    'fields': 'id,name,email,first_name,last_name'
}

# GOOGLE
# Google configuration
SOCIAL_AUTH_GOOGLE_OAUTH2_URL = 'https://accounts.google.com/o/oauth2/auth'
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = config('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = config('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')
# Define SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE to get extra permissions from Google.
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
]

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'authentication.pipeline.custom_social_user',
    'authentication.pipeline.custom_create_user',
    'info.pipeline.save_profile',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details'
)

EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT', cast=int)
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

CELERY_BROKER_URL = f"redis://{SERVICE_REDIS_USERNAME}:{SERVICE_REDIS_PASSWORD}@{SERVICE_REDIS_HOST}:{SERVICE_REDIS_PORT}/{SERVICE_REDIS_DB}"
CELERY_RESULT_BACKEND = f"redis://{SERVICE_REDIS_USERNAME}:{SERVICE_REDIS_PASSWORD}@{SERVICE_REDIS_HOST}:{SERVICE_REDIS_PORT}/{SERVICE_REDIS_DB}"
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TIMEZONE = 'Asia/Ho_Chi_Minh'
DJANGO_CELERY_BEAT_TZ_AWARE = True

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Set the Cloudinary configuration
cloudinary.config(
    cloud_name=config('CLOUDINARY_CLOUD_NAME'),
    api_key=config('CLOUDINARY_API_KEY'),
    api_secret=config('CLOUDINARY_API_SECRET'),
)

CLOUDINARY_DIRECTORY = {
    "avatar": f"my-job/avatar/{datetime.now().year}/{datetime.now().month}/",
    "cv": f"my-job/cv/{datetime.now().year}/{datetime.now().month}/",
    "logo": f"my-job/logo/{datetime.now().year}/{datetime.now().month}/",
    "coverImage": f"my-job/cover-image/{datetime.now().year}/{datetime.now().month}/",
    "company_image": f"my-job/company-image/{datetime.now().year}/{datetime.now().month}/",
    "careerImage": f"my-job/career-images/",
    "webBanner": f"my-job/banners/web-banners/",
    "mobileBanner": f"my-job/banners/mobile-banners/"
}

DOMAIN_CLIENT = {
    "local": "http://localhost:3000/",
    "production": config('WEB_CLIENT_URL'),
}

REDIRECT_LOGIN_CLIENT = {
    "JOB_SEEKER": "dang-nhap-ung-vien",
    "EMPLOYER": "dang-nhap-nha-tuyen-dung"
}

MYJOB_AUTH = {
    "VERIFY_EMAIL_LINK_EXPIRE_SECONDS": 7200,
    "RESET_PASSWORD_EXPIRE_SECONDS": 7200,
    "TIME_REQUIRED_FORGOT_PASSWORD": 120
}

REDIS_JOB_TITLE_EXPIRE_SECONDS = 14400

# TWILIO
TWILIO_ACCOUNT_SID = config('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = config('TWILIO_AUTH_TOKEN')
TWILIO_PHONE = config('TWILIO_PHONE')

# FIREBASE
# FIREBASE_CONFIG = os.path.join(BASE_DIR, 'configs', 'firebase-config.json')
FIREBASE_CONFIG = {
  "type": "service_account",
  "project_id": "myjobpro-6283b",
  "private_key_id": "559120960e53f0ea7c3682ac8a642a831907d55a",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEuwIBADANBgkqhkiG9w0BAQEFAASCBKUwggShAgEAAoIBAQCKAobXQqIZG1YB\nY2Yxie7yhAig+uxiQLhZTDelDzwTWZuHAXUyN4VyH/mA9bozZ6MntXvBHr08zdq8\ngFypwdXGWxN8uuMT5fpM4umOvhP8lQsI9cyMumswMQw8Zx9QpbUHOnzwe2KrxPNS\nMtckwmC3zSspduo3TY77Tmy0rkcgaMiY3wu1e1dbf8JQYfNxnkyQySdfUlMOBtoj\nQqF3IUHCoTnLYX1dFUUyb1pl7CsTXs9hrfbWCdkS54/+xdqmlx3Fw/2IU3q56buo\niVDbB6uH8YeBgvpPOiIkRqgZjcsFjARBDIAFTQ1TMV+xYFHqNTikg7ysnCfBI7PE\nB/4evi0vAgMBAAECgf8QmaEbXE96ietOayZZay5PhsQYyt2dyCThVCdEUpPqbsC5\n3T3zvMAn0XiSMwjkiecGeLHK0LKngZHwP/08xXS17XCAemqqNWA0F4eJs38FHfsN\nOzJozbiaA7ywW5GXiMdsZTWVhYzGD/ouSbcHhg72rx4IMxBvtbWyJwrNFL9BPGRO\n8q4VXTydbu1MCEQJ4Sfy8rN9xkb7iSgR4TyHvGBuaJ/x+ph7cB/6Bgm446DYkjfy\nkUPLRCbJ8SsbNVCxJ3G3pQXJ6yb744QnxA2Ktghf5BzwEO9P8VNHtYSxAgkgS+xi\nJpcTJyFH4S5b3IcIHkqHd8VDFZRmHS2UUW53kZUCgYEAvK73ApgqpeNKQEvVUSyL\nyE7XEYTEICsVPX6jqGDPpiuZhVe7WDYqfrEGmTzkM2fZkjnUza969UaCfmGSASc1\nNTK5gKTCLgNFYQnS4fkdYRdeNQnhnNh8oO5bPWgebl773ggpxtMF2xJRxgGQzIuw\nq1Wqxpzsi1kc4S/i3oZIMaMCgYEAuz9jhNk4vWdIbDs7NLDAzarTb1/6rfYJs2NU\nizkFOhYgr8krBttouBvNaSQpc28O5EmQbM/RWFcfxa3xYn0AdY5ZMjbjm8tJtp3J\nfHHrZQAp4dS731YZOwYvZiWbmsz2vu8riTDD0hUyjAuEBWVQshoAV4IkGfX6ufTm\nRmM7RwUCgYBq5g3YEHIJLi7BIrWmmcBQKiq7KCcduor8HiWGneLHWGhQHZZssbN9\nt7nvU4pOfYXMzKr+JW9aSypfg9P+h0Ij86sZcT76ZqwGAFTT5hl5Co47KnACNrzV\nSHW04qprCbFU5/cTSDdHGKfvsK9i07myOITapcl2YXR1OHYmcJmyVQKBgGe8kpID\nFiA4nDL6Da7/TZGj1keZ0POXn4A2w5vuFys7HxjERoYiAD4fiQl680v0dzeaWd0u\ntThP7FZEK7r4rcxy9I+RQUAKu+fkOsArDNKD6LAof30X4hqFLrVUmISGkRzuvBvh\nXFuDSuGzb4zduHszVIUmoIGReTqUpw7P4wNRAoGBAK7ew5uFdJ4frnatlmIFGdup\neP5W1T88pXYUlwZfEko+5c+vBSREymk6PfMEIQl7mIdC+CcPOiWN85vhKpzOvybD\n+U2jIy5YjIJnAeQgMgD0Oe0SgK3Hj97kdDAjx8Kwws/s/aeN3j/fcPgYOmfI7mTL\nq/KXfFFLcv+JjbRv1MCQ\n-----END PRIVATE KEY-----\n",
  "client_email": "firebase-adminsdk-19bjz@myjobpro-6283b.iam.gserviceaccount.com",
  "client_id": "106415384504593012065",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-19bjz%40myjobpro-6283b.iam.gserviceaccount.com"
}

cred = credentials.Certificate(FIREBASE_CONFIG)
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://myjobpro-6283b-default-rtdb.asia-southeast1.firebasedatabase.app/'
})

COMPANY_NAME = "MyJob"

JSON_PATH = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'myjob_api\\')

APP_ENVIRONMENT = config('APP_ENV')
